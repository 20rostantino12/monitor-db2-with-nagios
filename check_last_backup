#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# This scripts checks the elderly of the last backup. It throws alerts if the
# last backups are too old.
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_last_backup' command definition
# define command {
#         command_name    check_last_backup
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_last_backup -i '$ARG1$' -d '$ARG2$' -w '$ARG3$' -c '$ARG4$'"
# }
# define service{
#         host_name               db2server
#         service_description     Last backup
#         check_command           check_last_backup!/home/db2inst1!sample!240:140:50!168:96:25
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_last_backup]=/home/nagios/scripts/check_last_backup -i /home/db2inst1 -d sample -c 240:140:50 -w 168:96:25
#
# Then modify the path according to your script location, instance home dir,
# database and thresholds.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     Last backup
#         check_command           check_nrpe_1arg!check_last_backup
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Time in hours to consider the last backup age as critical.
#    This checks the full, incremental and delta backups.
#    Notation for these three type are times separated by colons
#    FF:II:DD = Full : Incremental : Delta.
#    Full is obligatory, other two are optionals.
# -d | --database : Database name.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1
# -T | --trace : Trace mode. Writes output in /tmp
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning : Time in hours to consider the last backup age as critical.
#    This checks the full, incremental and delta backups.
#    Notation for these three type are times separated by colons
#    FF:II:DD = Full : Incremental : Delta.
#    Full is obligatory, other two are optionals.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.1 2013-05-25

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.1 2013-05-25
}
# Function to show the help
function print_usage {
  echo "Usage: $1 { -i instanceHomeDirectory -d databaseName [-c][-w] ! -h \
! -V }\n [ -T ] [ -v ]"
}

function print_help {
  print_revision
  print_usage $1
  # Max 80 chars width.
  /bin/cat <<__EOT
Checks the elderly of the last backup of the database.
-c | --critical INTEGER:INTEGER:INTEGER
   Time in hours of the last backup to considered as critical.
-d | --database STRING
   Database name.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1
-T | --trace
   Trace mode: writes date and output in /tmp
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER:INTEGER:INTEGER
   Time in hours of the last backup to considered as warning
__EOT
}

function query {
  PARAM=$1
  RET=1

  if [[ $VERBOSE -ge 2 ]] ; then
    echo "Params: '$PARAM'"
  fi
  COMMAND_LIST="db2 -x 
with hist(start_time, operationtype) as (
 select start_time, operationtype
 from sysibmadm.db_history
 where operation = 'B' )
select timestampdiff(8, current timestamp - char(timestamp(max(start_time))))
from hist
where operationtype in ($PARAM)
order by 1"
  if [[ $VERBOSE -ge 2 ]] ; then
    echo "COMMAND: $COMMAND_LIST"
  fi
  LIST=$(db2 connect to $DATABASE_NAME > /dev/null ; $COMMAND_LIST ; db2 connect reset > /dev/null)
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$LIST'"
  fi
  if [[ $TRACE == true ]] ; then
    echo "RESULT:'$LIST'" >> $LOG
  fi
  # Check for errors
  CONN_ERROR=$(echo $LIST | grep SQL1024)
  HIST_ERROR=$(echo $LIST | grep SQL2155)
  HADR_ERROR=$(echo $LIST | grep SQL1773)
  HADR_REPLAY=$(echo $LIST | grep SQL1224)
  if [[ $CONN_ERROR != "" ]] ; then
    OUTPUT="Connection problem"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ $HIST_ERROR != "" ]] ; then
    OUTPUT="History file modified"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ $HADR_ERROR != "" ]] ; then
    OUTPUT="Trying to update calculation in Standby database"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ $HADR_REPLAY != "" ]] ; then
    OUTPUT="HADR replaying"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ $LIST == "" ]] ; then
    OUTPUT="Empty output, check the command"
    RETURN=$UNKNOWN
    CONTINUE=false
  else
    RET=0
  fi
  return $RET
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=$UNKNOWN

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=

APPL_NAME=$(basename ${0})

if [[ $# -eq 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

# The following requieres GNU getopt. See the following discusion.
# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options

TEMP=$(getopt -o c:d:hi:TvVw: --long critical:,database:,help,instance:,trace,version,verbose,warning: \
             -n $APPL_NAME -- "$@")

if [[ $? -ne 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  # Note the quotes around $TEMP: they are essential!
  eval set -- "$TEMP"

  HELP=false
  VERSION=false
  # Verbosity level
  VERBOSE=0
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  INSTANCE_HOME=
  DATABASE_NAME=
  WARNING_THRES=1
  CRITICAL_THRES=2
  while true; do
    case "$1" in
      -c | --critical ) CRITICAL_THRES=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -d | --database ) DATABASE_NAME=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -h | --help ) HELP=true; shift ;;
      -i | --instance ) INSTANCE_HOME=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -T | --trace ) TRACE=true ; shift ;;
      -v | --verbose ) VERBOSE=$(( $VERBOSE + 1 )); shift ;;
      -V | --version ) VERSION=true; shift ;;
      -w | --warning ) WARNING_THRES=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done
fi

if [[ $TRACE == true ]] ; then
  echo ">>>>>" >> $LOG
  date >> $LOG
  echo "PID $$" >> $LOG
fi

ECHO="help:$HELP, version:$VERSION, verbose:$VERBOSE, "
ECHO=$ECHO"directory:$INSTANCE_HOME, database:$DATABASE_NAME, "
ECHO=$ECHO"warning:$WARNING_THRES, critical:$CRITICAL_THRES"

if [[ $VERBOSE -ge 2 ]] ; then
  echo $ECHO
fi
if [[ $TRACE == true ]] ; then
  echo "PARAMS:$ECHO" >> $LOG
fi

if [[ $CONTINUE == true && $HELP == true ]] ; then
  print_help $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $VERSION == true ]] ; then
  print_revision $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $INSTANCE_HOME == "" ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $DATABASE_NAME == "" ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  CRIT_FULL=$(echo $CRITICAL_THRES | awk -F: '{print $1}')
  CRIT_INCR=$(echo $CRITICAL_THRES | awk -F: '{print $2}')
  CRIT_DELT=$(echo $CRITICAL_THRES | awk -F: '{print $3}')
  WARN_FULL=$(echo $WARNING_THRES | awk -F: '{print $1}')
  WARN_INCR=$(echo $WARNING_THRES | awk -F: '{print $2}')
  WARN_DELT=$(echo $WARNING_THRES | awk -F: '{print $3}')

  if [[ $WARNING_THRES == "" || $CRITICAL_THRES == ""
      || $WARN_FULL == "" || $CRIT_FULL == ""
      || $WARN_FULL -le 0 || $CRIT_FULL -le 0
      || $WARN_FULL -ge $CRIT_FULL 
      || ( $WARN_INCR != "" && $CRIT_INCR == "" )
      || ( $WARN_INCR == "" && $CRIT_INCR != "" )
      || ( $WARN_INCR != "" && $CRIT_INCR != ""
      && ( $WARN_INCR -le 0 || $CRIT_INCR -le 0
      || $WARN_INCR -ge $CRIT_INCR ))
      || ( $WARN_DELT != "" && $CRIT_DELT == "" )
      || ( $WARN_DELT == "" && $CRIT_DELT != "" )
      || ( $WARN_DELT != "" && $CRIT_DELT != ""
      && ( $WARN_DELT -le 0 || $CRIT_DELT -le 0
      || $WARN_DELT -ge $CRIT_DELT )) ]] ; then
    print_usage $APPL_NAME
    echo "Warning threshold should be less than critical threshold."
    echo "Threshold should be greater than 0."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi

if [[ $CONTINUE == true ]] ; then
  if [[ -d $INSTANCE_HOME && -e $INSTANCE_HOME/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . $INSTANCE_HOME/sqllib/db2profile
  else
    OUTPUT="Instance directory is invalid."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi

if [[ $CONTINUE == true ]] ; then
  COMMAND_DATABASE="db2 list db directory"
  if [[ $VERBOSE -ge 2 ]] ; then
    echo "COMMAND: $COMMAND_DATABASE"
  fi
  DATABASE=$($COMMAND_DATABASE | awk '/Database alias/ {print $4}' | grep -iw $DATABASE_NAME)
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$DATABASE'"
  fi

  if [[ $DATABASE == "" ]] ; then
    OUTPUT="The database $DATABASE_NAME is not cataloged."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi

if [[ $CONTINUE == true ]] ; then
  # Checks HADR role.
  HADR_ROLE=$(db2 get db cfg for wfscpd | awk '/HADR database role/ {print $5}')
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT HADR: '$HADR_ROLE'"
  fi
  # There could be just one query, but 'union all' is no allowed in HADR, thus 
  # three calls.
  # There is a problem when accessing the db_view, and the script hangs in any
  # of the three calls.
  if [[ ! -z $CRIT_DELT ]] ; then
    query "'D', 'E', 'I', 'O', 'F', 'N'"
    RET1=$?
    DELTA=$LIST
    if [[ $RET1 -eq 0 ]] ; then
      DIFF_DELT=$(echo $DELTA | awk '{print $1}')
      if [[ $HADR_ROLE != "STANDBY" ]] ; then
        if [[ $DIFF_DELT -ge $CRIT_DELT ]] ; then
          OUTPUT="Delta backup is too old."
          RETURN=$CRITICAL
        elif [[ $DIFF_DELT -ge $WARN_DELT ]] ; then
          OUTPUT="Delta backup is getting old."
          if [[ $RETURN -ne $CRITICAL ]] ; then
            RETURN=$WARNING
          fi
        else
          OUTPUT="OK Delta."
        fi
      fi
    fi
  fi
fi

if [[ $CONTINUE == true ]] ; then
  if [[ ! -z $CRIT_INCR ]] ; then
    query "'I', 'O', 'F', 'N'"
    RET2=$?
    INCREMENTAL=$LIST
    if [[ $RET2 -eq 0 ]] ; then
      DIFF_INCR=$(echo $INCREMENTAL | awk '{print $1}')
      if [[ $HADR_ROLE != "STANDBY" ]] ; then
        if [[ $DIFF_INCR -ge $CRIT_INCR ]] ; then
          OUTPUT="Incremental backup is too old. $OUTPUT"
          RETURN=$CRITICAL
        elif [[ $DIFF_INCR -ge $WARN_INCR ]] ; then
           OUTPUT="Incremental backup is getting old. $OUTPUT"
          if [[ $RETURN -ne $CRITICAL ]] ; then
            RETURN=$WARNING
          fi
        else
          OUTPUT="OK Incremental. $OUTPUT"
        fi
      fi
    fi
  fi
fi

if [[ $CONTINUE == true ]] ; then
  query "'F', 'N'"
  RET3=$?
  FULL=$LIST
  if [[ $RET3 -eq 0 ]] ; then
    DIFF_FULL=$(echo $FULL | awk '{print $1}')
    if [[ $HADR_ROLE != "STANDBY" ]] ; then
      if [[ $DIFF_FULL -ge $CRIT_FULL ]] ; then
        OUTPUT="Full backup is too old. $OUTPUT"
        RETURN=$CRITICAL
      elif [[ $DIFF_FULL -ge $WARN_FULL ]] ; then
        OUTPUT="Full backup is getting old. $OUTPUT"
        RETURN=$WARNING
      else
        OUTPUT="OK Full. $OUTPUT"
        RETURN=$OK
      fi
    else
      OUTPUT="OK. Standby database, check values in primary."
      RETURN=$OK
    fi

    # Performance data
    PERFORMANCE="'Full backup'=$DIFF_FULL;$WARN_FULL;$CRIT_FULL "
    if [[ ! -z $CRIT_DELT ]] ; then
      LONG_PERFORMANCE="'Delta backup'=$DIFF_DELT;$WARN_DELT;$CRIT_DELT "
    fi
    if [[ ! -z $CRIT_INCR ]] ; then
      LONG_PERFORMANCE="'Incremental backup'=$DIFF_INCR;$WARN_INCR;$CRIT_INCR $LONG_PERFORMANCE"
    fi
  else
    OUTPUT="There are problems retreiving the data."
    RETURN=$UNKNOWN
  fi
fi

# Prints the output.
if [[ $OUTPUT == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
echo "$OUTPUT|$PERFORMANCE
$LONG_OUTPUT|$LONG_PERFORMANCE"
# Returns the error code.
if [[ $VERBOSE -ge 2 ]] ; then
  echo "Return code: $RETURN"
fi
if [[ $TRACE == true ]] ; then
  echo -e "OUTPUT:$OUTPUT\nPERF:$PERFORMANCE\nLONG_OUT:$LONG_OUTPUT\nLONGPERF:$LONG_PERFORMANCE\nRET_CODE:$RETURN" >> $LOG
  date >> $LOG
  echo -e "<<<<<\n" >> $LOG
fi
exit $RETURN

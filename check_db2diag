#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# Check the quantity of messages written in the db2diag.log file. It allows to
# detect an anormal behaviour in the instance, because most of the time, when
# an recurrent error happens in the database/instance, it is described in the
# diagnostic file.
#
# Here comes the documentation
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_log_usage' command definition
# define command {
#         command_name    check_db2diag
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_db2diag -i '$ARG1$'"
# }
# define service{
#         host_name               db2server
#         service_description     Diagnostic messages
#         check_command           check_db2diag!/home/db2inst1
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_db2diag]=/home/nagios/scripts/check_db2diag -i /home/db2inst1
#
# Then modify the path according to your script location, instance home dir,
# database and thresholds.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     Diagnostic messages
#         check_command           check_nrpe_1arg!check_db2diag
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Quantity of messages produced to be considered as critical.
# -d | --database : Database name.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1
# -T | --trace : Trace mode. Writes output in /tmp
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning : Quantity of messages written in the db2diag.log file to be
#    considered as critical.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.0 2013-10-22

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.0 2013-10-23
}
# Function to show the help
function print_usage {
  echo "Usage: $1 { -i instanceHomeDirectory [-c][-w] ! -h ! -V } [ -T ] \ [ -v ]"
}

function print_help {
  print_revision
  print_usage $1
  # Max 80 chars width.
  /bin/cat <<__EOT
Checks the quantity of messages written in the db2diag.log since the last check.
-c | --critical INTEGER
   Quantity of messages to be considered as critical.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1
-T | --trace
   Trace mode: writes date and output in /tmp
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Quantity of messages to be considered as warning.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=$UNKNOWN

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=

APPL_NAME=$(basename ${0})

if [[ $# -eq 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

# The following requieres GNU getopt. See the following discusion.
# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options

TEMP=$(getopt -o c:hi:TvVw: --long critical:,instance:,help,trace,verbose,version,warning: \
             -n $APPL_NAME -- "$@")

if [[ $? -ne 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  # Note the quotes around $TEMP: they are essential!
  eval set -- "$TEMP"

  HELP=false
  VERSION=false
  # Verbosity level
  VERBOSE=0
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  INSTANCE_HOME=
  WARNING_THRES=1
  CRITICAL_THRES=2
  while true; do
    case "$1" in
      -c | --critical ) CRITICAL_THRES=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -h | --help ) HELP=true; shift ;;
      -i | --instance ) INSTANCE_HOME=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -T | --trace ) TRACE=true ; shift ;;
      -V | --version ) VERSION=true; shift ;;
      -v | --verbose ) VERBOSE=$(( $VERBOSE + 1 )); shift ;;
      -w | --warning ) WARNING_THRES=$(echo $2 | cut -d' ' -f1) ; shift 2 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done
fi

if [[ $TRACE == true ]] ; then
  echo ">>>>>" >> $LOG
  date >> $LOG
  echo "PID $$" >> $LOG
fi

ECHO="help:$HELP, version:$VERSION, verbose:$VERBOSE, "
ECHO=$ECHO"directory:$INSTANCE_HOME, "
ECHO=$ECHO"warning:$WARNING_THRES, critical:$CRITICAL_THRES"

if [[ $VERBOSE -ge 2 ]] ; then
  echo $ECHO
fi
if [[ $TRACE == true ]] ; then
  echo "PARAMS:$ECHO" >> $LOG
fi

if [[ $CONTINUE == true && $HELP == true ]] ; then
  print_help $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $VERSION == true ]] ; then
  print_revision $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $INSTANCE_HOME == "" ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && ( $WARNING_THRES == "" || $CRITICAL_THRES == ""
    || ! $WARNING_THRES =~ ^[0-9]+$ || ! $CRITICAL_THRES =~ ^[0-9]+$
    || $WARNING_THRES -le 0 || $CRITICAL_THRES -le 0
    || $WARNING_THRES -ge $CRITICAL_THRES ) ]] ; then
  print_usage $APPL_NAME
  echo "Warning threshold should be less than critical threshold."
  echo "Threshold should be greater than 0."
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  if [[ -d $INSTANCE_HOME && -e $INSTANCE_HOME/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . $INSTANCE_HOME/sqllib/db2profile
  else
    OUTPUT="Instance directory is invalid."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  DATE_FILE=/tmp/last_date_check_db2diag_$(echo ${INSTANCE_HOME} | sed 's/\//\\/g')
  DATE_VALUE=$(cat ${DATE_FILE})
  COMMAND_QTY="db2diag -readfile -time ${DATE_VALUE}"
  if [[ -f ${DATE_FILE} ]] ; then
    if [[ ${VERBOSE} -ge 2 ]] ; then
      echo "COMMAND: ${COMMAND_QTY}"
    fi
    QTY=$(${COMMAND_QTY} | grep -cvP '\S')
    if [[ ${VERBOSE} -ge 3 ]] ; then
      echo "Result: ${QTY}"
    fi

    RE='^[0-9]+$'
    if [[ ! ${QTY} =~ ${RE} ]] ; then
      OUTPUT="Output is not a number: '${QTY}'"
      RETURN=${UNKNOWN}
    else
      if [[ ${QTY} -lt ${WARNING_THRES} ]] ; then
        OUTPUT="OK, quantity is normal since ${DATE_VALUE}."
        RETURN=${OK}
      elif [[ ${QTY} -lt ${CRITICAL_THRES} ]] ; then
        OUTPUT="Quantity is increasing since ${DATE_VALUE}, please check the db2diag.log."
        RETURN=${WARNING}
      else
        OUTPUT="Quantity is too high since ${DATE_VALUE}, please check the db2diag.log right now."
        RETURN=${CRITICAL}
      fi
      date +"%Y-%m-%d-%H.%M.%S" > ${DATE_FILE}
    fi
    PERFORMANCE="'logs'=${QTY}"
  else
    OUTPUT="First execution, there is not a reference point."
    RETURN=${UNKNOWN}
    date +"%Y-%m-%d-%H.%M.%S" > ${DATE_FILE}
  fi
fi

# Prints the output.
if [[ ${OUTPUT} == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
echo "${OUTPUT}|${PERFORMANCE}
${LONG_OUTPUT}|${LONG_PERFORMANCE}"
# Returns the error code.
if [[ ${VERBOSE} -ge 2 ]] ; then
  echo "Return code: ${RETURN}"
fi
if [[ ${TRACE} == true ]] ; then
  echo -e "OUTPUT:${OUTPUT}\nPERF:${PERFORMANCE}\nLONG_OUT:${LONG_OUTPUT}\nLONGPERF:${LONG_PERFORMANCE}\nRET_CODE:${RETURN}" >> ${LOG}
  date >> ${LOG}
  echo -e "<<<<<\n" >> ${LOG}
fi
exit ${RETURN}

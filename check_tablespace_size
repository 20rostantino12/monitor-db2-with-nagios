#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# This script analyzes the allocated and used space in a tablespace.
#
# This script was based on the plugins written by Felipe Alkain de Souza.
# http://www.dbatodba.com/db2/scripts-db2/nagios-plugins
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_tablespace_size' command definition
# define command {
#         command_name    check_tablespace_size
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_tablespace_size -i '$ARG1$' -d '$ARG2$' -n '$ARG3$'"
# }
# define service{
#         host_name               db2server
#         service_description     Tablespace usage
#         check_command           check_tablespace_size!/home/db2inst1!sample!USERSPACE1
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Critical threshold in milliseconds.
# -d | --database : Database name.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1
# -n | --name : Tablespace name
# -V | --version : Show the current version of this script.
# -v | --verbose : Execute the program in verbose mode.
# -w | --warning : Warning threshold in milliseconds.
# --id : Tablespace ID (instead of name)
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.0 2013-01-18

# Flag for debugging.
#set -xv

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.0 2013-01-18
}
# Function to show the help
function print_usage {
  echo "Usage: $1 { -i instanceHomeDirectory -d databaseName
[-n tablespaceName # --id tablespaceId] [-c][-w] ! -h ! -V } [ -v ]"
}

function print_help {
  print_revision
  print_usage $1
  # Max 80 chars width.
  /bin/cat <<__EOT
This script check the usage of a tablespace.
-c | --critical INTEGER
   Critical percentage of usage.
-d | --database STRING
   Database name.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1
-n | --name STRING
   Tablespace name to check.
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Warning level of usage.
--id
   ID of the tablespace. This should be usage when the name is unknown.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=$UNKNOWN

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=

APPL_NAME=$0

if [[ $# -eq 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

# The following requieres GNU getopt. See the following discusion.
# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options

TEMP=`getopt -o hVvi:d:c:w:n: --long help,version,verbose,instance:,database:,critical:,warning:,name:,id: \
             -n $APPL_NAME -- "$@"`

if [[ $? -ne 0 ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  # Note the quotes around $TEMP: they are essential!
  eval set -- "$TEMP"

  HELP=false
  VERSION=false
  # Verbosity level
  VERBOSE=0
  INSTANCE_HOME=
  DATABASE_NAME=
  WARNING_THRES=80
  CRITICAL_THRES=90
  TABLESPACE_NAME=
  TABLESPACE_ID=
  while true; do
    case "$1" in
      -c | --critical ) CRITICAL_THRES=`echo $2 | awk '{print $1}'`; shift 2 ;;
      -d | --database ) DATABASE_NAME=`echo $2 | awk '{print $1}'`; shift 2 ;;
      -h | --help ) HELP=true; shift ;;
      -i | --instance ) INSTANCE_HOME=`echo $2 | awk '{print $1}'`; shift 2 ;;
      -n | --name ) TABLESPACE_NAME=`echo $2 | awk '{print $1}'` ; shift 2 ;;
      -V | --version ) VERSION=true; shift ;;
      -v | --verbose ) VERBOSE=$(( $VERBOSE + 1 )); shift ;;
      -w | --warning ) WARNING_THRES=`echo $2 | awk '{print $1}'`; shift 2 ;;
      --id ) TABLESPACE_ID=`echo $2 | awk '{print $1}'`; shift 2 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done
fi

if [[ $VERBOSE -ge 2 ]] ; then
  ECHO="help:$HELP, version:$VERSION, verbose:$VERBOSE, "
  ECHO=$ECHO"directory:$INSTANCE_HOME, database:$DATABASE_NAME, "
  ECHO=$ECHO"warning:$WARNING_THRES, critical:$CRITICAL_THRES, "
  ECHO=$ECHO"ts_name:$TABLESPACE_NAME, ts_id:$TABLESPACE_ID"
  echo $ECHO
fi

if [[ $CONTINUE == true && $HELP == true ]] ; then
  print_help $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $VERSION == true ]] ; then
  print_revision $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $INSTANCE_HOME == "" ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true && $DATABASE_NAME == "" ]] ; then
  print_usage $APPL_NAME
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $WARNING_THRES == "" || $CRITICAL_THRES == ""
    || ! $WARNING_THRES =~ ^[0-9]+$ || ! $CRITICAL_THRES =~ ^[0-9]+$
    || $WARNING_THRES -le 0 || $CRITICAL_THRES -le 0
    || $WARNING_THRES -gt 100 || $CRITICAL_THRES -gt 100
    || $WARNING_THRES -ge $CRITICAL_THRES ]] ; then
  print_usage $APPL_NAME
  echo "Warning threshold should be less than critical threshold."
  echo "Threshold should be greater than 0 and less than 100."
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $TABLESPACE_NAME == "" && $TABLESPACE_ID == "" ]] ; then
  print_usage $APPL_NAME
  echo "Tablespace name or id should be provided."
  RETURN=$UNKNOWN
  CONTINUE=false
fi

if [[ $CONTINUE == true ]] ; then
  # Trims the characters.
  INSTANCE_HOME=`echo $INSTANCE_HOME | awk '{print $1}'`
  DATABASE_NAME=`echo $DATABASE_NAME | awk '{print $1}'`

  if [[ -d $INSTANCE_HOME && -e $INSTANCE_HOME/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . $INSTANCE_HOME/sqllib/db2profile
  else
    OUTPUT="Instance directory is invalid."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi

if [[ $CONTINUE == true ]] ; then
  COMMAND_DATABASE="db2 list db directory"
  if [[ $VERBOSE -ge 2 ]] ; then
    echo "COMMAND: $COMMAND_DATABASE"
  fi
  DATABASE=`$COMMAND_DATABASE | awk '/Database alias/ {print $4}' | grep -iw $DATABASE_NAME`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$DATABASE'"
  fi

  if [[ $DATABASE == "" ]] ; then
    OUTPUT="The database $DATABASE_NAME is not cataloged."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi
# Checks if the tablespace exist.
if [[ $CONTINUE == true ]] ; then
  COMMAND_EXIST="db2 list tablespaces"
  if [[ $VERBOSE -ge 2 ]] ; then
    echo "COMMAND: $COMMAND_EXIST"
  fi
  if [[ $TABLESPACE_NAME != "" ]] ; then
    EXIST=`db2 connect to $DATABASE_NAME > /dev/null ; if [[ $? -ne 0 ]] ; then echo "error" ; fi ; $COMMAND_EXIST | grep Name | grep -w $TABLESPACE_NAME | awk '{print $3}' ; db2 connect reset > /dev/null`
  else
    EXIST=`db2 connect to $DATABASE_NAME > /dev/null ; if [[ $? -ne 0 ]] ; then echo "error" ; fi ; $COMMAND_EXIST | grep ID | grep -w $TABLESPACE_ID | awk '{print $4}' ; db2 connect reset > /dev/null`
  fi
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$EXIST'"
  fi

  # Substring para ver si hubo un error
  EXIST_ERROR=`echo $EXIST | cut -c 1-5`
  if [[ $EXIST_ERROR == "error" ]] ; then
    OUTPUT="Connection problem"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ ( $TABLESPACE_ID == "" && $EXIST != $TABLESPACE_NAME ) || ( $TABLESPACE_NAME == "" && $EXIST != $TABLESPACE_ID ) ]] ; then
    OUTPUT="Tablespace $TABLESPACE_NAME$TABLESPACE_ID does not exist."
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
fi
if [[ $CONTINUE == true ]] ; then
  COMMAND_TS="db2 -x select integer(TBSP_UTILIZATION_PERCENT), TBSP_TYPE, TBSP_CONTENT_TYPE, TBSP_USING_AUTO_STORAGE, TBSP_AUTO_RESIZE_ENABLED, TBSP_STATE, TBSP_TOTAL_SIZE_KB / 1024, TBSP_USED_SIZE_KB / 1024, TBSP_PAGE_TOP * TBSP_PAGE_SIZE / 1024 / 1024 from sysibmadm.TBSP_UTILIZATION "
  if [[ $TABLESPACE_NAME != "" ]] ; then
    COMMAND_TS="$COMMAND_TS where TBSP_NAME = '$TABLESPACE_NAME'"
  else
    COMMAND_TS="$COMMAND_TS where TBSP_ID = $TABLESPACE_ID"
  fi
  if [[ $VERBOSE -ge 2 ]] ; then
    echo "COMMAND: $COMMAND_TS"
  fi
  set -f
  TS=`db2 connect to $DATABASE_NAME > /dev/null ; if [[ $? -ne 0 ]] ; then echo "error" ; fi ; $COMMAND_TS ; db2 connect reset > /dev/null`
  set +f
  TS_ERROR=`echo $TS | cut -c 1-5`
  if [[ $TS_ERROR == "error" ]] ; then
    OUTPUT="Connection problem"
    RETURN=$UNKNOWN
    CONTINUE=false
  fi
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$TS'"
  fi
fi

if [[ $CONTINUE == true ]] ; then
  SIZE=`printf '%s\n' "$TS" | awk '{print $1}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$SIZE'"
  fi

  TYPE=`printf '%s\n' "$TS" | awk '{print $2}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$TYPE'"
  fi

  if [[ $TYPE == "SMS" ]] ; then
    if [[ $SIZE -lt $WARNING_THRES ]] ; then
      OUTPUT="Tablespace size is OK (SMS)."
      RETURN=$OK
    else
      CONTENT=`printf '%s\n' "$TS" | awk '{print $3}'`
      if [[ $VERBOSE -ge 3 ]] ; then
        echo "RESULT:'$CONTENT'"
      fi
      if [[ $CONTENT == "SYSTEMP" || $CONTENT == "USRTEMP" ]] ; then
        OUTPUT="Temporary tablespace is being used. - $SIZE"
        RETURN=$OK
      else
        OUTPUT="Script error for SMS tablespace. - $SIZE"
        RETURN=$CRITICAL
      fi
    fi
  elif [[ $TYPE == "DMS" ]] ; then
    # Tablespace should be DMS
    AUTO=`printf '%s\n' "$TS" | awk '{print $4}'`
    if [[ $VERBOSE -ge 3 ]] ; then
      echo "RESULT:'$AUTO'"
    fi

    RESIZE=`printf '%s\n' "$TS" | awk '{print $5}'`
    if [[ $VERBOSE -ge 3 ]] ; then
      echo "RESULT:'$RESIZE'"
    fi

    if [[ ! $AUTO =~ ^[0-9]+$ || ! $RESIZE =~ ^[0-9]+$ ]] ; then
      OUTPUT="Problem determining if auto or resize"
      RETURN=$UNKNOWN
    elif [[ $AUTO -eq "1" || $RESIZE -eq "1" ]] ; then
      if [[ $SIZE -lt $WARNING_THRES ]] ; then
        OUTPUT="Tablespace size is OK ($SIZE% - Auto resize)."
        RETURN=$OK
      elif [[ $SIZE -lt $CRITICAL_THRES ]] ; then
        OUTPUT="Tablespace size is getting bigger ($SIZE% - Auto resize)."
        RETURN=$OK
      else
        OUTPUT="Tablespace size is critical. It should be resized automatically ($SIZE% - Auto reisze)."
        RETURN=$OK
      fi
    else
      if [[ $SIZE -lt $WARNING_THRES ]] ; then
        OUTPUT="Tablespace size is OK ($SIZE%)."
        RETURN=$OK
      elif [[ $SIZE -lt $CRITICAL_THRES ]] ; then
        OUTPUT="Tablespace size is getting bigger ($SIZE%)."
        RETURN=$WARNING
      else
        OUTPUT="Tablespace size is critical ($SIZE%)."
        RETURN=$CRITICAL
      fi
    fi
  else
    OUTPUT="Problem retrieving the type"
    RETURN=$UNKNOWN
  fi
  
  #Availability
  STATUS=`printf '%s\n' "$TS" | awk '{print $6}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$STATUS'"
  fi

  # Substring para ver si hubo un error
  STATUS_ERROR=`echo $STATUS | cut -c 1-5`
  if [[ $STATUS_ERROR == "error" ]] ; then
    OUTPUT="Connection problem"
    RETURN=$UNKNOWN
    CONTINUE=false
  elif [[ $STATUS == "BACKUP_IN_PROGRESS" ]] ; then
    OUTPUT="Backup in progress. $OUTPUT"
  elif [[ $STATUS != "NORMAL" ]] ; then
    OUTPUT="State not normal ($STATUS). $OUTPUT"
    if [[ $RETURN == $OK ]] ; then
      RETURN=$WARNING
    fi
  fi
fi

if [[ $CONTINUE == true ]] ; then
  # Performance data
  ## Allocated size
  TB_ALLOCATED=`printf '%s\n' "$TS" | awk '{print $7}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$TB_ALLOCATED'"
  fi
  LONG_OUTPUT="Tablespace $TABLESPACE_NAME$TABLESPACE_ID has allocated $TB_ALLOCATED MB"
  LONG_PERFORMANCE="Allocated=${TB_ALLOCATED} "

  ## Used size
  TB_SIZE=`printf '%s\n' "$TS" | awk '{print $8}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$TB_SIZE'"
  fi
  PERFORMANCE="Tablespace=${TB_SIZE} "

  ## High water mark
  TB_HWM=`printf '%s\n' "$TS" | awk '{print $9}'`
  if [[ $VERBOSE -ge 3 ]] ; then
    echo "RESULT:'$TB_HWM'"
  fi
  LONG_OUTPUT="$LONG_OUTPUT and its watermark is at $TB_HWM"
  LONG_PERFORMANCE="${LONG_PERFORMANCE}Watermark=${TB_HWM}"
  # TODO As part of the performance, display the status (backup pending, restore pending, etc.
fi

# Prints the output.
if [[ $OUTPUT == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
echo "$OUTPUT|$PERFORMANCE
$LONG_OUTPUT|$LONG_PERFORMANCE"
# Returns the error code.
if [[ $VERBOSE -ge 2 ]] ; then
  echo "Return code: $RETURN"
fi
exit $RETURN
